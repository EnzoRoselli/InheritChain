{"abi":[],"devdoc":{"author":"Matt Condon (@shrugs)","details":"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`","kind":"dev","methods":{},"title":"Counters","version":1},"evm":{"assembly":"    /* \"@openzeppelin/contracts/utils/Counters.sol\":424:1395   */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Counters.sol\":424:1395   */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122061ff10289f043bf5939e7e851238bbb80d8104c7b6ace582472994a8ff859e9964736f6c63430008130033\n}\n","bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122061ff10289f043bf5939e7e851238bbb80d8104c7b6ace582472994a8ff859e9964736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH2 0xFF10 0x28 SWAP16 DIV EXTCODESIZE CREATE2 SWAP4 SWAP15 PUSH31 0x851238BBB80D8104C7B6ACE582472994A8FF859E9964736F6C634300081300 CALLER ","sourceMap":"424:971:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;424:971:11;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122061ff10289f043bf5939e7e851238bbb80d8104c7b6ace582472994a8ff859e9964736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH2 0xFF10 0x28 SWAP16 DIV EXTCODESIZE CREATE2 SWAP4 SWAP15 PUSH31 0x851238BBB80D8104C7B6ACE582472994A8FF859E9964736F6C634300081300 CALLER ","sourceMap":"424:971:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"current(struct Counters.Counter storage pointer)":"infinite","decrement(struct Counters.Counter storage pointer)":"infinite","increment(struct Counters.Counter storage pointer)":"infinite","reset(struct Counters.Counter storage pointer)":"infinite"}},"legacyAssembly":{".code":[{"begin":424,"end":1395,"name":"PUSH #[$]","source":11,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":424,"end":1395,"name":"PUSH [$]","source":11,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":424,"end":1395,"name":"PUSH","source":11,"value":"B"},{"begin":424,"end":1395,"name":"DUP3","source":11},{"begin":424,"end":1395,"name":"DUP3","source":11},{"begin":424,"end":1395,"name":"DUP3","source":11},{"begin":424,"end":1395,"name":"CODECOPY","source":11},{"begin":424,"end":1395,"name":"DUP1","source":11},{"begin":424,"end":1395,"name":"MLOAD","source":11},{"begin":424,"end":1395,"name":"PUSH","source":11,"value":"0"},{"begin":424,"end":1395,"name":"BYTE","source":11},{"begin":424,"end":1395,"name":"PUSH","source":11,"value":"73"},{"begin":424,"end":1395,"name":"EQ","source":11},{"begin":424,"end":1395,"name":"PUSH [tag]","source":11,"value":"1"},{"begin":424,"end":1395,"name":"JUMPI","source":11},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"4E487B71"},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"E0"},{"begin":-1,"end":-1,"name":"SHL","source":-1},{"begin":424,"end":1395,"name":"PUSH","source":11,"value":"0"},{"begin":424,"end":1395,"name":"MSTORE","source":11},{"begin":424,"end":1395,"name":"PUSH","source":11,"value":"0"},{"begin":424,"end":1395,"name":"PUSH","source":11,"value":"4"},{"begin":424,"end":1395,"name":"MSTORE","source":11},{"begin":424,"end":1395,"name":"PUSH","source":11,"value":"24"},{"begin":424,"end":1395,"name":"PUSH","source":11,"value":"0"},{"begin":424,"end":1395,"name":"REVERT","source":11},{"begin":424,"end":1395,"name":"tag","source":11,"value":"1"},{"begin":424,"end":1395,"name":"JUMPDEST","source":11},{"begin":424,"end":1395,"name":"ADDRESS","source":11},{"begin":424,"end":1395,"name":"PUSH","source":11,"value":"0"},{"begin":424,"end":1395,"name":"MSTORE","source":11},{"begin":424,"end":1395,"name":"PUSH","source":11,"value":"73"},{"begin":424,"end":1395,"name":"DUP2","source":11},{"begin":424,"end":1395,"name":"MSTORE8","source":11},{"begin":424,"end":1395,"name":"DUP3","source":11},{"begin":424,"end":1395,"name":"DUP2","source":11},{"begin":424,"end":1395,"name":"RETURN","source":11}],".data":{"0":{".auxdata":"a264697066735822122061ff10289f043bf5939e7e851238bbb80d8104c7b6ace582472994a8ff859e9964736f6c63430008130033",".code":[{"begin":424,"end":1395,"name":"PUSHDEPLOYADDRESS","source":11},{"begin":424,"end":1395,"name":"ADDRESS","source":11},{"begin":424,"end":1395,"name":"EQ","source":11},{"begin":424,"end":1395,"name":"PUSH","source":11,"value":"80"},{"begin":424,"end":1395,"name":"PUSH","source":11,"value":"40"},{"begin":424,"end":1395,"name":"MSTORE","source":11},{"begin":424,"end":1395,"name":"PUSH","source":11,"value":"0"},{"begin":424,"end":1395,"name":"DUP1","source":11},{"begin":424,"end":1395,"name":"REVERT","source":11}]}},"sourceList":["@openzeppelin/contracts/access/Ownable.sol","@openzeppelin/contracts/token/ERC20/ERC20.sol","@openzeppelin/contracts/token/ERC20/IERC20.sol","@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","@openzeppelin/contracts/token/ERC721/ERC721.sol","@openzeppelin/contracts/token/ERC721/IERC721.sol","@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","@openzeppelin/contracts/utils/Address.sol","@openzeppelin/contracts/utils/Context.sol","@openzeppelin/contracts/utils/Counters.sol","@openzeppelin/contracts/utils/Strings.sol","@openzeppelin/contracts/utils/introspection/ERC165.sol","@openzeppelin/contracts/utils/introspection/IERC165.sol","@openzeppelin/contracts/utils/math/Math.sol","Inheritance.sol","InheritanceDeed.sol","TestToken.sol","#utility.yul"]},"methodIdentifiers":{}},"ewasm":{"wasm":""},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Counters.sol\":\"Counters\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee\",\"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu\"]}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}
